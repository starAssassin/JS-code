<!DOCTYPE html>
<html>
<head>
<style>
#div1 {
  width: 250px;
  height: 250px;
  padding: 10px;
  border: 1px solid #aaa;
}
</style>
<script>
function allowDrop(bfly) {
   bfly.preventDefault();
}

function drag(bfly) {
  bfly.dataTransfer.setData("text", bfly.target.id);
};

function drop(bfly) {
  bfly.preventDefault();
  var data = bfly.dataTransfer.getData("text");
  bfly.target.appendChild(document.getElementById(data));
}
</script>
</head>
<body>
<h2>My first drag and drop example</h2>
<div style="width: 50rem;">
Learning the basics will require me to type this out and fully understand what the methods are and what they do.
<br><br>
The Event interface's <strong>preventDefault()</strong> method tells the user agent that if the event goes unhandled, its default should not be taken as normally would be.  The event continues to propagate as usual with only the exception that the event does nothing if no event listeners call stopProgagation(), which terminates propagation at once.</div>

<div style="width: 50rem; padding-top: 10px; padding-bottom: 10px;">
The <strong>DataTransfer.setData()</strong> method sets the drag operation's drag data to the specified data and type.  If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type.  If data for the given type already exists, the existing data is replaced in the same position.  That is, the order of the types list is not changed when replacing data of the same type.
<br><br>
Example data types are text/plain and text/uri-list.

</div>

</div>


<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)">
</div>
<br>
<img id="drag1" src="puzzle.png" draggable="true" ondragstart="drag(event)" width = "250" height="250">

</body>
</html>
